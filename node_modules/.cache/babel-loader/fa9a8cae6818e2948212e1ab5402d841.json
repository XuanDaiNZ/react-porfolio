{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * This is a custom hook that can be used to submit a form and simulate an API call\n * It uses Math.random() to simulate a random success or failure, with 50% chance of each\n */\nconst useSubmit = onOpen => {\n  _s();\n  const [isLoading, setLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const submit = async (url, data) => {\n    const random = Math.random();\n    setLoading(true);\n    try {\n      await wait(2000);\n      if (random < 0.5) {\n        throw new Error(\"Something went wrong\");\n      }\n      const successResponse = {\n        type: 'success',\n        message: `Thanks for your submission ${data.firstName}, we will get back to you shortly!`\n      };\n      setResponse(successResponse);\n      onOpen(successResponse.type, successResponse.message);\n    } catch (error) {\n      const errorResponse = {\n        type: 'error',\n        message: 'Something went wrong, please try again later!'\n      };\n      setResponse(errorResponse);\n      onOpen(errorResponse.type, errorResponse.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    response,\n    submit\n  };\n};\n_s(useSubmit, \"YOVOG/9T4K52uQQxOOHX4PP6REA=\");\nexport default useSubmit;","map":{"version":3,"names":["useState","wait","ms","Promise","resolve","setTimeout","useSubmit","onOpen","_s","isLoading","setLoading","response","setResponse","submit","url","data","random","Math","Error","successResponse","type","message","firstName","error","errorResponse"],"sources":["D:/WEB FRONT END/portfolio/reactlab/src/hooks/useSubmit.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * This is a custom hook that can be used to submit a form and simulate an API call\n * It uses Math.random() to simulate a random success or failure, with 50% chance of each\n */\nconst useSubmit = (onOpen) => {\n  const [isLoading, setLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n\n  const submit = async (url, data) => {\n    const random = Math.random();\n    setLoading(true);\n    try {\n      await wait(2000);\n      if (random < 0.5) {\n        throw new Error(\"Something went wrong\");\n      }\n      const successResponse = {\n        type: 'success',\n        message: `Thanks for your submission ${data.firstName}, we will get back to you shortly!`,\n      };\n      setResponse(successResponse);\n      onOpen(successResponse.type, successResponse.message);\n    } catch (error) {\n      const errorResponse = {\n        type: 'error',\n        message: 'Something went wrong, please try again later!',\n      };\n      setResponse(errorResponse);\n      onOpen(errorResponse.type, errorResponse.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isLoading, response, submit };\n}\n\nexport default useSubmit;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,IAAI,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAEtE;AACA;AACA;AACA;AACA,MAAMI,SAAS,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMa,MAAM,GAAG,MAAAA,CAAOC,GAAG,EAAEC,IAAI,KAAK;IAClC,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM,CAAC,CAAC;IAC5BN,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMT,IAAI,CAAC,IAAI,CAAC;MAChB,IAAIe,MAAM,GAAG,GAAG,EAAE;QAChB,MAAM,IAAIE,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAMC,eAAe,GAAG;QACtBC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,8BAA8BN,IAAI,CAACO,SAAS;MACvD,CAAC;MACDV,WAAW,CAACO,eAAe,CAAC;MAC5BZ,MAAM,CAACY,eAAe,CAACC,IAAI,EAAED,eAAe,CAACE,OAAO,CAAC;IACvD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMC,aAAa,GAAG;QACpBJ,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE;MACX,CAAC;MACDT,WAAW,CAACY,aAAa,CAAC;MAC1BjB,MAAM,CAACiB,aAAa,CAACJ,IAAI,EAAEI,aAAa,CAACH,OAAO,CAAC;IACnD,CAAC,SAAS;MACRX,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAED,SAAS;IAAEE,QAAQ;IAAEE;EAAO,CAAC;AACxC,CAAC;AAAAL,EAAA,CA/BKF,SAAS;AAiCf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}